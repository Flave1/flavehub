// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Threading.Tasks;
using flavehub.Contracts.RequestObjs;
using Refit;
using flavehub;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace flavehub.SDK.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace flavehub.Sdk
{
    using flavehub.SDK.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIflavehubApi : IflavehubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIflavehubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<PostResponse>> IflavehubApi.GetAllAsync()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllAsync", new Type[] {  });
            return (Task<ApiResponse<PostResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PostResponse>> IflavehubApi.GetAsync(int postId)
        {
            var arguments = new object[] { postId };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAsync", new Type[] { typeof(int) });
            return (Task<ApiResponse<PostResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PostResponse>> IflavehubApi.CreateAsync(AddPostReqObj createPostRequest)
        {
            var arguments = new object[] { createPostRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateAsync", new Type[] { typeof(AddPostReqObj) });
            return (Task<ApiResponse<PostResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PostResponse>> IflavehubApi.UpdateAsync(int postId, EditPostReqObj updatePostRequest)
        {
            var arguments = new object[] { postId, updatePostRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateAsync", new Type[] { typeof(int), typeof(EditPostReqObj) });
            return (Task<ApiResponse<PostResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<string>> IflavehubApi.DeleteAsync(int postId)
        {
            var arguments = new object[] { postId };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteAsync", new Type[] { typeof(int) });
            return (Task<ApiResponse<string>>)func(Client, arguments);
        }
    }
}

namespace flavehub.Sdk
{
    using flavehub.SDK.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIIdentityApi : IIdentityApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIIdentityApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthSuccessResponse>> IIdentityApi.RegisterAsync(UserRegistrationReqObj registrationRequest)
        {
            var arguments = new object[] { registrationRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("RegisterAsync", new Type[] { typeof(UserRegistrationReqObj) });
            return (Task<ApiResponse<AuthSuccessResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthSuccessResponse>> IIdentityApi.LoginAsync(UserLoginReqObj loginRequest)
        {
            var arguments = new object[] { loginRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("LoginAsync", new Type[] { typeof(UserLoginReqObj) });
            return (Task<ApiResponse<AuthSuccessResponse>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<AuthSuccessResponse>> IIdentityApi.RefreshAsync(UserRefreshTokenReqObj refreshRequest)
        {
            var arguments = new object[] { refreshRequest };
            var func = requestBuilder.BuildRestResultFuncForMethod("RefreshAsync", new Type[] { typeof(UserRefreshTokenReqObj) });
            return (Task<ApiResponse<AuthSuccessResponse>>)func(Client, arguments);
        }
    }
}
